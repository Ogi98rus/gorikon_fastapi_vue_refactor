import redis
import json
import logging
from typing import Optional, Any, Dict
from app.core.config import settings
from app.services.fallback_cache import fallback_cache

logger = logging.getLogger(__name__)

class RedisService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis —Å fallback –Ω–∞ in-memory –∫–µ—à"""
    
    def __init__(self):
        self.redis: Optional[redis.Redis] = None
        self.redis_url = getattr(settings, 'REDIS_URL', 'redis://localhost:6379')
        self.use_fallback = False
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        try:
            # –ü–∞—Ä—Å–∏–º URL Redis
            if self.redis_url.startswith('redis://'):
                # –£–±–∏—Ä–∞–µ–º redis:// –∏ –ø–∞—Ä—Å–∏–º
                url_parts = self.redis_url.replace('redis://', '').split(':')
                host = url_parts[0] if url_parts[0] else 'localhost'
                port = int(url_parts[1]) if len(url_parts) > 1 else 6379
                
                self.redis = redis.Redis(
                    host=host,
                    port=port,
                    decode_responses=True,
                    max_connections=20,
                    socket_connect_timeout=5,
                    socket_timeout=5,
                    retry_on_timeout=True
                )
            else:
                # Fallback –¥–ª—è localhost
                self.redis = redis.Redis(
                    host='localhost',
                    port=6379,
                    decode_responses=True,
                    max_connections=20
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.redis.ping()
            self.use_fallback = False
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            self.redis = None
            self.use_fallback = True
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback in-memory –∫–µ—à")
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis"""
        if self.redis:
            self.redis.close()
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis")
    
    def set_cache(self, key: str, value: Any, expire: int = 3600) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–µ—à"""
        if self.use_fallback or not self.redis:
            return fallback_cache.set_cache(key, value, expire)
        
        try:
            if isinstance(value, (dict, list)):
                value = json.dumps(value, ensure_ascii=False)
            self.redis.set(key, value, ex=expire)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–µ—à–∞ –≤ Redis: {e}")
            # Fallback –Ω–∞ in-memory –∫–µ—à
            self.use_fallback = True
            return fallback_cache.set_cache(key, value, expire)
    
    def get_cache(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞"""
        if self.use_fallback or not self.redis:
            return fallback_cache.get_cache(key)
        
        try:
            value = self.redis.get(key)
            if value:
                try:
                    return json.loads(value)
                except json.JSONDecodeError:
                    return value
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–∞ –∏–∑ Redis: {e}")
            # Fallback –Ω–∞ in-memory –∫–µ—à
            self.use_fallback = True
            return fallback_cache.get_cache(key)
    
    def delete_cache(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞"""
        if self.use_fallback or not self.redis:
            return fallback_cache.delete_cache(key)
        
        try:
            self.redis.delete(key)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–µ—à–∞ –∏–∑ Redis: {e}")
            # Fallback –Ω–∞ in-memory –∫–µ—à
            self.use_fallback = True
            return fallback_cache.delete_cache(key)
    
    def set_session(self, session_id: str, data: Dict[str, Any], expire: int = 86400) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.set_cache(f"session:{session_id}", data, expire)
    
    def get_session(self, session_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.get_cache(f"session:{session_id}")
    
    def delete_session(self, session_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.delete_cache(f"session:{session_id}")
    
    def increment_counter(self, key: str, expire: int = 60) -> int:
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è rate limiting"""
        if self.use_fallback or not self.redis:
            return fallback_cache.increment_counter(key, expire)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pipeline –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
            pipe = self.redis.pipeline()
            pipe.incr(key)
            pipe.expire(key, expire)
            result = pipe.execute()
            return result[0]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á–µ—Ç—á–∏–∫–∞ –≤ Redis: {e}")
            # Fallback –Ω–∞ in-memory –∫–µ—à
            self.use_fallback = True
            return fallback_cache.increment_counter(key, expire)
    
    def get_counter(self, key: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞"""
        if self.use_fallback or not self.redis:
            return fallback_cache.get_counter(key)
        
        try:
            value = self.redis.get(key)
            return int(value) if value else 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑ Redis: {e}")
            # Fallback –Ω–∞ in-memory –∫–µ—à
            self.use_fallback = True
            return fallback_cache.get_counter(key)
    
    def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis"""
        if self.use_fallback:
            return fallback_cache.health_check()
        
        if not self.redis:
            return False
        
        try:
            self.redis.ping()
            return True
        except Exception:
            self.use_fallback = True
            return fallback_cache.health_check()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis —Å–µ—Ä–≤–∏—Å–∞
redis_service = RedisService() 