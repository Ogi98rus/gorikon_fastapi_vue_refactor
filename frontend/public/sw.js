// Service Worker –¥–ª—è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
// –í–µ—Ä—Å–∏—è –∫–µ—à–∞ - –æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
const CACHE_VERSION = 'v1.0.0';
const CACHE_NAME = `generator-cache-${CACHE_VERSION}`;

// –§–∞–π–ª—ã –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
const STATIC_CACHE_FILES = [
  '/',
  '/index.html',
  '/manifest.json',
  '/favicon.ico',
];

// –§–∞–π–ª—ã API –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
const DYNAMIC_CACHE_PATTERNS = [
  '/api/analytics/dashboard',
  '/api/auth/check',
];

// –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è
const NEVER_CACHE_PATTERNS = [
  '/api/math/generate',
  '/api/ktp/generate',
  '/api/auth/login',
  '/api/auth/register',
];

// ============= –£–°–¢–ê–ù–û–í–ö–ê SERVICE WORKER =============

self.addEventListener('install', (event) => {
  console.log('üì¶ Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞...');
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('üìÅ Service Worker: –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
        // –ö–µ—à–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        return Promise.allSettled(
          STATIC_CACHE_FILES.map(url => 
            cache.add(url).catch(err => {
              console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞—Ç—å:', url, err);
              return null;
            })
          )
        );
      })
      .then(() => {
        console.log('‚úÖ Service Worker: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        return self.skipWaiting();
      })
      .catch((error) => {
        console.error('‚ùå Service Worker: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
      })
  );
});

// ============= –ê–ö–¢–ò–í–ê–¶–ò–Ø SERVICE WORKER =============

self.addEventListener('activate', (event) => {
  console.log('üîÑ Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è...');
  
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–µ—à–∏
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== CACHE_NAME) {
              console.log('üóëÔ∏è Service Worker: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('‚úÖ Service Worker: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        return self.clients.claim();
      })
  );
});

// ============= –ü–ï–†–ï–•–í–ê–¢ –ó–ê–ü–†–û–°–û–í =============

self.addEventListener('fetch', (event) => {
  const request = event.request;
  const url = new URL(request.url);
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã
  if (request.method !== 'GET') {
    return;
  }
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å—Å—è
  if (NEVER_CACHE_PATTERNS.some(pattern => url.pathname.includes(pattern))) {
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
  event.respondWith(
    handleRequest(request)
  );
});

// ============= –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í =============

async function handleRequest(request) {
  const url = new URL(request.url);
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤ –∫–µ—à–µ
    const cachedResponse = await caches.match(request);
    
    if (cachedResponse) {
      console.log('üìÑ –ò–∑ –∫–µ—à–∞:', url.pathname);
      return cachedResponse;
    }
    
    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
    const networkResponse = await fetch(request);
    
    // 3. –ö–µ—à–∏—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∞–π–ª—ã
    if (shouldCache(request, networkResponse)) {
      const cache = await caches.open(CACHE_NAME);
      cache.put(request, networkResponse.clone());
      console.log('üíæ –ó–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–æ:', url.pathname);
    }
    
    return networkResponse;
    
  } catch (error) {
    console.log('üåê –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –¥–ª—è:', url.pathname);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (request.mode === 'navigate') {
      return getOfflinePage();
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è API
    if (url.pathname.startsWith('/api/')) {
      return new Response(
        JSON.stringify({
          error: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
          offline: true
        }),
        {
          status: 503,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }
    
    throw error;
  }
}

// ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

function shouldCache(request, response) {
  const url = new URL(request.url);
  
  // –ö–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  if (!response || response.status !== 200 || response.type !== 'basic') {
    return false;
  }
  
  // –ö–µ—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
  if (url.pathname.includes('/static/') || 
      url.pathname.includes('/icons/') ||
      url.pathname.includes('/assets/')) {
    return true;
  }
  
  // –ö–µ—à–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  if (DYNAMIC_CACHE_PATTERNS.some(pattern => url.pathname.includes(pattern))) {
    return true;
  }
  
  return false;
}

async function getOfflinePage() {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const mainPage = await caches.match('/');
    if (mainPage) {
      return mainPage;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
  return new Response(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–û—Ñ–ª–∞–π–Ω - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          text-align: center;
          padding: 50px;
          background: #f5f5f5;
        }
        .offline-container {
          background: white;
          padding: 40px;
          border-radius: 10px;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          max-width: 500px;
          margin: 0 auto;
        }
        .icon {
          font-size: 64px;
          margin-bottom: 20px;
        }
        h1 { color: #333; }
        p { color: #666; }
        button {
          background: #2196F3;
          color: white;
          padding: 10px 20px;
          border: none;
          border-radius: 5px;
          cursor: pointer;
          margin-top: 20px;
        }
      </style>
    </head>
    <body>
      <div class="offline-container">
        <div class="icon">üì°</div>
        <h1>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</h1>
        <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.</p>
        <button onclick="window.location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
      </div>
    </body>
    </html>
  `, {
    headers: { 'Content-Type': 'text/html' }
  });
}

// ============= BACKGROUND SYNC (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è) =============

self.addEventListener('sync', (event) => {
  console.log('üîÑ Background Sync:', event.tag);
  
  if (event.tag === 'upload-pending') {
    event.waitUntil(uploadPendingData());
  }
});

async function uploadPendingData() {
  // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
}

// ============= PUSH NOTIFICATIONS (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è) =============

self.addEventListener('push', (event) => {
  console.log('üì¨ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
  
  const options = {
    body: event.data ? event.data.text() : '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    icon: '/icons/icon-192x192.png',
    badge: '/icons/icon-72x72.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1
    }
  };
  
  event.waitUntil(
    self.registration.showNotification('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', options)
  );
});

// ============= –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ö–û–í –ü–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú =============

self.addEventListener('notificationclick', (event) => {
  console.log('üîî –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é');
  
  event.notification.close();
  
  event.waitUntil(
    clients.openWindow('/')
  );
}); 