import axios from 'axios'

const API_BASE = '/api/i18n'

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
const SUPPORTED_LANGUAGES = {
  ru: {
    code: 'ru',
    name: '–†—É—Å—Å–∫–∏–π',
    flag: 'üá∑üá∫',
    nativeName: '–†—É—Å—Å–∫–∏–π'
  },
  en: {
    code: 'en', 
    name: 'English',
    flag: 'üá∫üá∏',
    nativeName: 'English'
  },
  kk: {
    code: 'kk',
    name: '“ö–∞–∑–∞“õ—à–∞',
    flag: 'üá∞üáø', 
    nativeName: '“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ'
  },
  be: {
    code: 'be',
    name: '–ë–µ–ª–∞—Ä—É—Å–∫–∞—è',
    flag: 'üáßüáæ',
    nativeName: '–ë–µ–ª–∞—Ä—É—Å–∫–∞—è –º–æ–≤–∞'
  },
  uk: {
    code: 'uk',
    name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
    flag: 'üá∫üá¶',
    nativeName: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞'
  }
}

// –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (fallback)
const BASE_TRANSLATIONS = {
  ru: {
    // –û–±—â–∏–µ
    'common.loading': '–ó–∞–≥—Ä—É–∑–∫–∞...',
    'common.error': '–û—à–∏–±–∫–∞',
    'common.success': '–£—Å–ø–µ—à–Ω–æ',
    'common.save': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
    'common.cancel': '–û—Ç–º–µ–Ω–∏—Ç—å',
    'common.delete': '–£–¥–∞–ª–∏—Ç—å',
    'common.edit': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
    'common.close': '–ó–∞–∫—Ä—ã—Ç—å',
    'common.back': '–ù–∞–∑–∞–¥',
    'common.next': '–î–∞–ª–µ–µ',
    'common.previous': '–ü—Ä–µ–¥—ã–¥—É—â–∏–π',
    'common.submit': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
    'common.reset': '–°–±—Ä–æ—Å–∏—Ç—å',
    'common.search': '–ü–æ–∏—Å–∫',
    'common.filter': '–§–∏–ª—å—Ç—Ä',
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    'nav.home': '–ì–ª–∞–≤–Ω–∞—è',
    'nav.math': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
    'nav.ktp': '–ö–¢–ü',
    'nav.analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
    'nav.profile': '–ü—Ä–æ—Ñ–∏–ª—å',
    'nav.login': '–í–æ–π—Ç–∏',
    'nav.register': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
    'nav.logout': '–í—ã–π—Ç–∏',
    
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    'auth.login': '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
    'auth.register': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
    'auth.email': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞',
    'auth.password': '–ü–∞—Ä–æ–ª—å',
    'auth.fullName': '–ü–æ–ª–Ω–æ–µ –∏–º—è',
    'auth.school': '–®–∫–æ–ª–∞',
    'auth.forgotPassword': '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?',
    'auth.rememberMe': '–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è',
    'auth.agreeTerms': '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
    
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    'math.title': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á',
    'math.operations': '–û–ø–µ—Ä–∞—Ü–∏–∏',
    'math.operands': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤',
    'math.interval': '–î–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª',
    'math.examples': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤',
    'math.generate': '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏',
    
    // –ö–¢–ü –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    'ktp.title': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ö–¢–ü',
    'ktp.startDate': '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞',
    'ktp.endDate': '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
    'ktp.weekdays': '–î–Ω–∏ –Ω–µ–¥–µ–ª–∏',
    'ktp.lessonsPerDay': '–£—Ä–æ–∫–æ–≤ –≤ –¥–µ–Ω—å',
    'ktp.holidays': '–ü—Ä–∞–∑–¥–Ω–∏–∫–∏',
    'ktp.generate': '–°–æ–∑–¥–∞—Ç—å –ö–¢–ü',
    
    // –ü—Ä–æ—Ñ–∏–ª—å
    'profile.title': '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    'profile.stats': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
    'profile.activity': '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    'profile.edit': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
    'profile.changePassword': '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å',
    
    // –û—à–∏–±–∫–∏
    'error.general': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
    'error.network': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
    'error.validation': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
    'error.auth': '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
    'error.permission': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'
  },
  
  en: {
    // Common
    'common.loading': 'Loading...',
    'common.error': 'Error',
    'common.success': 'Success',
    'common.save': 'Save',
    'common.cancel': 'Cancel',
    'common.delete': 'Delete',
    'common.edit': 'Edit',
    'common.close': 'Close',
    'common.back': 'Back',
    'common.next': 'Next',
    'common.previous': 'Previous',
    'common.submit': 'Submit',
    'common.reset': 'Reset',
    'common.search': 'Search',
    'common.filter': 'Filter',
    
    // Navigation
    'nav.home': 'Home',
    'nav.math': 'Math',
    'nav.ktp': 'LTP',
    'nav.analytics': 'Analytics',
    'nav.profile': 'Profile',
    'nav.login': 'Login',
    'nav.register': 'Register',
    'nav.logout': 'Logout',
    
    // Authentication
    'auth.login': 'Login',
    'auth.register': 'Registration',
    'auth.email': 'Email',
    'auth.password': 'Password',
    'auth.fullName': 'Full Name',
    'auth.school': 'School',
    'auth.forgotPassword': 'Forgot Password?',
    'auth.rememberMe': 'Remember Me',
    'auth.agreeTerms': 'I agree to the terms of use',
    
    // Math Generator
    'math.title': 'Math Problems Generator',
    'math.operations': 'Operations',
    'math.operands': 'Number of Operands',
    'math.interval': 'Number Range',
    'math.examples': 'Number of Examples',
    'math.generate': 'Generate Problems',
    
    // LTP Generator
    'ktp.title': 'Learning-Thematic Planning Generator',
    'ktp.startDate': 'Start Date',
    'ktp.endDate': 'End Date',
    'ktp.weekdays': 'Weekdays',
    'ktp.lessonsPerDay': 'Lessons per Day',
    'ktp.holidays': 'Holidays',
    'ktp.generate': 'Generate LTP',
    
    // Profile
    'profile.title': 'User Profile',
    'profile.stats': 'Statistics',
    'profile.activity': 'Activity',
    'profile.edit': 'Edit Profile',
    'profile.changePassword': 'Change Password',
    
    // Errors
    'error.general': 'An error occurred',
    'error.network': 'Network error',
    'error.validation': 'Validation error',
    'error.auth': 'Authentication error',
    'error.permission': 'Permission denied'
  }
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ i18n
const state = {
  // –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
  currentLanguage: 'ru',
  
  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
  availableLanguages: SUPPORTED_LANGUAGES,
  
  // –ü–µ—Ä–µ–≤–æ–¥—ã
  translations: BASE_TRANSLATIONS,
  
  // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
  serverTranslations: {},
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: false,
  error: null,
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  locale: {
    dateFormat: 'DD.MM.YYYY',
    timeFormat: '24',
    numberFormat: 'ru-RU',
    currency: 'RUB'
  }
}

// –ú—É—Ç–∞—Ü–∏–∏
const mutations = {
  SET_LOADING(state, loading) {
    state.isLoading = loading
  },
  
  SET_ERROR(state, error) {
    state.error = error
  },
  
  SET_CURRENT_LANGUAGE(state, language) {
    state.currentLanguage = language
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    switch (language) {
      case 'en':
        state.locale = {
          dateFormat: 'MM/DD/YYYY',
          timeFormat: '12',
          numberFormat: 'en-US',
          currency: 'USD'
        }
        break
      case 'kk':
        state.locale = {
          dateFormat: 'DD.MM.YYYY',
          timeFormat: '24',
          numberFormat: 'kk-KZ',
          currency: 'KZT'
        }
        break
      case 'be':
      case 'uk':
        state.locale = {
          dateFormat: 'DD.MM.YYYY',
          timeFormat: '24',
          numberFormat: 'ru-RU',
          currency: 'BYN'
        }
        break
      default: // ru
        state.locale = {
          dateFormat: 'DD.MM.YYYY',
          timeFormat: '24',
          numberFormat: 'ru-RU',
          currency: 'RUB'
        }
    }
  },
  
  SET_TRANSLATIONS(state, { language, translations }) {
    state.serverTranslations[language] = translations
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    if (state.translations[language]) {
      state.translations[language] = {
        ...state.translations[language],
        ...translations
      }
    } else {
      state.translations[language] = translations
    }
  },
  
  CLEAR_ERROR(state) {
    state.error = null
  }
}

// –î–µ–π—Å—Ç–≤–∏—è
const actions = {
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
  async setLanguage({ commit, dispatch }, language) {
    if (!SUPPORTED_LANGUAGES[language]) {
      throw new Error(`Unsupported language: ${language}`)
    }
    
    try {
      commit('SET_LOADING', true)
      commit('CLEAR_ERROR')
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
      commit('SET_CURRENT_LANGUAGE', language)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('selected_language', language)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
      if (!state.serverTranslations[language]) {
        await dispatch('loadTranslations', language)
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ —Å–µ—Å—Å–∏–∏
      try {
        await axios.post(`${API_BASE}/set-language`, { language })
      } catch (error) {
        console.warn('Failed to set server language:', error)
      }
      
    } catch (error) {
      const errorMessage = error.response?.data?.detail || '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞'
      commit('SET_ERROR', errorMessage)
      throw error
    } finally {
      commit('SET_LOADING', false)
    }
  },
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
  async loadTranslations({ commit }, language) {
    try {
      const response = await axios.get(`${API_BASE}/translations/${language}`)
      commit('SET_TRANSLATIONS', { language, translations: response.data })
    } catch (error) {
      console.warn(`Failed to load translations for ${language}:`, error)
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ
    }
  },
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  async initializeLanguage({ commit, dispatch }) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
      const savedLanguage = localStorage.getItem('selected_language')
      const browserLanguage = navigator.language.split('-')[0]
      
      let language = savedLanguage
      if (!language && Object.keys(SUPPORTED_LANGUAGES).includes(browserLanguage)) {
        language = browserLanguage
      }
      if (!language) {
        language = 'ru' // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
      
      await dispatch('setLanguage', language)
      
    } catch (error) {
      console.warn('Language initialization failed:', error)
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      commit('SET_CURRENT_LANGUAGE', 'ru')
    }
  },
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
  async preloadAllTranslations({ dispatch }) {
    const languages = Object.keys(SUPPORTED_LANGUAGES)
    
    try {
      await Promise.allSettled(
        languages.map(lang => dispatch('loadTranslations', lang))
      )
    } catch (error) {
      console.warn('Failed to preload translations:', error)
    }
  },
  
  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
  clearError({ commit }) {
    commit('CLEAR_ERROR')
  }
}

// –ì–µ—Ç—Ç–µ—Ä—ã
const getters = {
  isLoading: state => state.isLoading,
  error: state => state.error,
  hasError: state => !!state.error,
  
  // –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
  currentLanguage: state => state.currentLanguage,
  currentLanguageInfo: state => SUPPORTED_LANGUAGES[state.currentLanguage],
  
  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
  availableLanguages: state => Object.values(state.availableLanguages),
  supportedLanguageCodes: state => Object.keys(state.availableLanguages),
  
  // –ü–µ—Ä–µ–≤–æ–¥—ã
  translations: state => state.translations[state.currentLanguage] || {},
  
  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
  t: (state) => (key, params = {}) => {
    const translations = state.translations[state.currentLanguage] || state.translations['ru'] || {}
    let text = translations[key] || key
    
    // –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    Object.keys(params).forEach(param => {
      text = text.replace(new RegExp(`{${param}}`, 'g'), params[param])
    })
    
    return text
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  locale: state => state.locale,
  dateFormat: state => state.locale.dateFormat,
  timeFormat: state => state.locale.timeFormat,
  numberFormat: state => state.locale.numberFormat,
  currency: state => state.locale.currency,
  
  // –ü–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  formatDate: (state) => (date) => {
    if (!date) return ''
    const options = {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    }
    return new Date(date).toLocaleDateString(state.locale.numberFormat, options)
  },
  
  formatDateTime: (state) => (date) => {
    if (!date) return ''
    const options = {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    }
    return new Date(date).toLocaleDateString(state.locale.numberFormat, options)
  },
  
  formatNumber: (state) => (number) => {
    if (number === null || number === undefined) return ''
    return new Intl.NumberFormat(state.locale.numberFormat).format(number)
  },
  
  formatCurrency: (state) => (amount) => {
    if (amount === null || amount === undefined) return ''
    return new Intl.NumberFormat(state.locale.numberFormat, {
      style: 'currency',
      currency: state.locale.currency
    }).format(amount)
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏ RTL/LTR
  isRTL: (state) => {
    const rtlLanguages = ['ar', 'he', 'fa']
    return rtlLanguages.includes(state.currentLanguage)
  },
  
  textDirection: (state, getters) => getters.isRTL ? 'rtl' : 'ltr'
}

export default {
  namespaced: true,
  state,
  mutations,
  actions,
  getters
} 